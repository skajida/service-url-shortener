// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go
//
// Generated by this command:
//
//	mockgen -source contract.go -destination mocks_test.go -package service_test
//
// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUrlRepository is a mock of UrlRepository interface.
type MockUrlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUrlRepositoryMockRecorder
}

// MockUrlRepositoryMockRecorder is the mock recorder for MockUrlRepository.
type MockUrlRepositoryMockRecorder struct {
	mock *MockUrlRepository
}

// NewMockUrlRepository creates a new mock instance.
func NewMockUrlRepository(ctrl *gomock.Controller) *MockUrlRepository {
	mock := &MockUrlRepository{ctrl: ctrl}
	mock.recorder = &MockUrlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrlRepository) EXPECT() *MockUrlRepositoryMockRecorder {
	return m.recorder
}

// AddEntry mocks base method.
func (m *MockUrlRepository) AddEntry(ctx context.Context, url, shortUrl string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEntry", ctx, url, shortUrl)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEntry indicates an expected call of AddEntry.
func (mr *MockUrlRepositoryMockRecorder) AddEntry(ctx, url, shortUrl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEntry", reflect.TypeOf((*MockUrlRepository)(nil).AddEntry), ctx, url, shortUrl)
}

// FindEntry mocks base method.
func (m *MockUrlRepository) FindEntry(ctx context.Context, shortUrl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEntry", ctx, shortUrl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEntry indicates an expected call of FindEntry.
func (mr *MockUrlRepositoryMockRecorder) FindEntry(ctx, shortUrl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEntry", reflect.TypeOf((*MockUrlRepository)(nil).FindEntry), ctx, shortUrl)
}
